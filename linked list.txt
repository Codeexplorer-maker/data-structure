#include<iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int el) {
        data = el;
        next = NULL;
    }
};

class SLL_ADT {
    Node* head;
public:
    SLL_ADT() {
        head = NULL;
    }

    Node* search(int x) {
        Node* temp = head;
        while (temp != NULL) {
            if (temp->data == x) {
                return temp;  // found â†’ return pointer
            }
            temp = temp->next;
        }
        return NULL;  // not found
    }

    void addtohead(int x);
    bool isempty();
    int removefromhead();
    void addtotail(int x);
    void addatposition(int el, int i);
    void removeAtPosition(int pos);
    void display();
};

void SLL_ADT::addtohead(int x) {
    Node* N = new Node(x);
    if (isempty()) {
        head = N;
    } else {
        N->next = head;
        head = N;
    }
}

bool SLL_ADT::isempty() {
    return head == NULL;
}

int SLL_ADT::removefromhead() {
    if (!isempty()) {
        Node* top = head;
        int val = top->data;   // store deleted value
        head = head->next;
        delete top;
        return val;
    }
    cout << "List is empty, cannot remove!" << endl;
    return -1; // indicates failure
}

void SLL_ADT::addtotail(int x) {
    Node* N = new Node(x);
    if (isempty()) {
        head = N;
    } else {
        Node* temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = N;
    }
}

void SLL_ADT::addatposition(int el, int i) {
    if (i <= 1 || isempty()) {
        addtohead(el);
        return;
    }

    Node* N = new Node(el);
    Node* temp = head;
    int cnt = 1;

    while (cnt < i - 1 && temp->next != NULL) {
        temp = temp->next;
        cnt++;
    }

    N->next = temp->next;
    temp->next = N;
}

void SLL_ADT::removeAtPosition(int pos) {
    if (head == NULL) {
        cout << "List is empty!" << endl;
        return;
    }

    // Case 1: remove head
    if (pos == 1) {
        Node* temp = head;
        head = head->next;
        delete temp;
        return;
    }

    // Traverse to (pos-1)th node
    Node* temp = head;
    for (int i = 1; temp != NULL && i < pos - 1; i++) {
        temp = temp->next;
    }

    // If position is invalid
    if (temp == NULL || temp->next == NULL) {
        cout << "Position out of range!" << endl;
        return;
    }

    // Node to be deleted
    Node* nodeToDelete = temp->next;
    temp->next = nodeToDelete->next;
    delete nodeToDelete;
}

void SLL_ADT::display() {
    if (isempty()) {
        cout << "List is empty!" << endl;
        return;
    }

    Node* temp = head;
    while (temp != NULL) {
        cout << temp->data << " -> ";
        temp = temp->next;
    }
    cout << "NULL" << endl;
}

int main() {
    SLL_ADT list;
    int choice, value;

    do {
        cout << "\n...Singly LinkedList Menu...\n";
        cout << "1. Insert at Beginning\n";
        cout << "2. Insert at Position\n";
        cout << "3. Delete from Beginning\n";
        cout << "4. Delete from Position\n";
        cout << "5. Search Element\n";
        cout << "6. Display List\n";
        cout << "7. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter the value to insert: ";
            cin >> value;
            list.addtohead(value);
            break;

        case 2: {
            cout << "Enter the value to insert: ";
            cin >> value;
            cout << "Enter the position to insert: ";
            int pos;
            cin >> pos;
            list.addatposition(value, pos);
            break;
        }

        case 3: {
            int removed = list.removefromhead();
            if (removed != -1)
                cout << "Removed element: " << removed << endl;
            break;
        }

        case 4: {
            cout << "Enter the position to remove: ";
            int rpos;
            cin >> rpos;
            list.removeAtPosition(rpos);
            break;
        }

        case 5: {
            cout << "Enter the element to search: ";
            int svalue;
            cin >> svalue;
            Node* result = list.search(svalue);
            if (result != NULL) {
                cout << "Element " << svalue << " found at node address: " << result << endl;
            } else {
                cout << "Element " << svalue << " not found in the list." << endl;
            }
            break;
        }

        case 6:
            list.display();
            break;

        case 7:
            cout << "Exiting...\n";
            break;

        default:
            cout << "Invalid Choice! Try again.\n";
        }
    } while (choice != 7);

    return 0;
}
